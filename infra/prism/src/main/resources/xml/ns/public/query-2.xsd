<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2012 Evolveum
  ~
  ~ The contents of this file are subject to the terms
  ~ of the Common Development and Distribution License
  ~ (the License). You may not use this file except in
  ~ compliance with the License.
  ~
  ~ You can obtain a copy of the License at
  ~ http://www.opensource.org/licenses/cddl1 or
  ~ CDDLv1.0.txt file in the source code distribution.
  ~ See the License for the specific language governing
  ~ permission and limitations under the License.
  ~
  ~ If applicable, add the following below the CDDL Header,
  ~ with the fields enclosed by brackets [] replaced by
  ~ your own identifying information:
  ~
  ~ Portions Copyrighted 2012 [name of copyright owner]
  -->

<xsd:schema targetNamespace="http://prism.evolveum.com/xml/ns/public/query-2"
            xmlns:tns="http://prism.evolveum.com/xml/ns/public/query-2"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-2"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-2"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
            elementFormDefault="qualified"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            TODO
            
            Version: 2.0
            Recommended namespace prefix: q
        </xsd:documentation>
    </xsd:annotation>

    <xsd:import namespace="http://www.w3.org/2001/XMLSchema" schemaLocation="http://www.w3.org/2001/XMLSchema">
        <xsd:annotation>
            <xsd:documentation>
                Importing the schema of XSD schema definition explicitly. This causes that we can use "strict" matching
                for the xsd:schema elements used in runtime.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-2"
                schemaLocation="http://prism.evolveum.com/xml/ns/public/annotation-2">
        <xsd:annotation>
            <xsd:documentation>
                Common prism annotations used in various XSD schemas.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>
    
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-2"
                schemaLocation="http://prism.evolveum.com/xml/ns/public/types-2">
        <xsd:annotation>
            <xsd:documentation>
                Common prism types.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>
    
    <!-- Filters & queries -->

    <xsd:complexType name="FilterType">
        <xsd:annotation>
            <xsd:appinfo>
                 <jaxb:dom/> 
            </xsd:appinfo>
        </xsd:annotation>
    </xsd:complexType>
    
    <xsd:complexType name="PagingType">
        <xsd:annotation>
            <xsd:documentation>
                Parameters limiting the number of returned
                entries, offset, etc.
                Used in the web service operations
                such as list or search
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="orderBy" type="t:XPathType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Property by which the results should be sorted.
                        Reference to a property (XPath).
                        Just one property for now.
                        Maybe we will change this to a list later.
                        If not specified, the ordering is arbitrary.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="orderDirection" type="tns:OrderDirectionType" minOccurs="0" default="ascending">
                <xsd:annotation>
                    <xsd:documentation>
                        Direction of ordering (ascending or descending).
                        Only valid if "orderBy" element is specified.
                        If not specified, the ordering order is ascending.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="offset" type="xsd:int" default="0" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        The index of the first returned entry, starting
                        with zero. Therefore if 0 is specified, the resulting list
                        will start with first entry. If 1 is specified, the resulting set will
                        start with second entry. If not specified, value of zero (0) is assumed.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="maxSize" type="xsd:int" default="2147483647" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        The maximum number of entries returned. The
                        operation may return specified number of number of
                        entries or less. If not specified, unlimited maximum 
                        size is assumed.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name="OrderDirectionType">
        <xsd:annotation>
            <xsd:documentation>
                Type of an operation (change). It defines operations to change          
                object, it is not limited to object modifications.
                TODO: How to handle renames?
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="ascending">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ASCENDING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="descending">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="DESCENDING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:element name="query" type="tns:QueryType"/>

    <xsd:complexType name="QueryType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="description" type="xsd:string" minOccurs="0" maxOccurs="1"/>
            <xsd:element ref="tns:filter"/> 
            <xsd:element name="paging" type="tns:PagingType" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="filter" type="tns:FilterType"/>
    
    
    
    
    <xsd:complexType name="UriFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:FilterType">
                <xsd:attribute name="uri" type="xsd:anyURI"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="type" substitutionGroup="tns:filter" type="tns:UriFilterType"/>

    <xsd:element name="path" type="t:XPathType">
        <xsd:annotation>
            <xsd:documentation>
                XPath to the XML element for the queried property.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="ValueType" mixed="true">
        <xsd:sequence>
           	<xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax">
               	<xsd:annotation>
                   	<xsd:documentation>
                       	The elements and values of queried properties.
                       	Multi-valued properties are not allowed here.
                       	Use "and" or "or" clauses if needed.
                   	</xsd:documentation>
                    <xsd:appinfo>
       	                <xjc:dom/>
           	        </xsd:appinfo>
               	</xsd:annotation>
           	</xsd:any>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="value" type="tns:ValueType"/>

    <xsd:complexType name="PropertyComplexValueFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:FilterType">
                <xsd:sequence>
                    <xsd:element ref="tns:path" minOccurs="0" maxOccurs="1"/>
                    <xsd:choice>
                        <xsd:element ref="tns:value"/>
                        <xsd:any namespace="##other" processContents="strict">
                        	<xsd:annotation>
                        		<xsd:documentation>
                        			Extensibility point for various expression languages and other
                        			"value derivation" mechanisms.
                        		</xsd:documentation>
                        	</xsd:annotation>
                        </xsd:any>
                    </xsd:choice>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="PropertySimpleValueFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:FilterType">
                <xsd:sequence>
                    <xsd:element name="property" type="t:XPathType">
                        <xsd:annotation>
                            <xsd:documentation>
                                XPath to the property being queried.
                                It is mandatory, as there is no reasonable
                                default as in the case of path.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:choice>
                        <xsd:element name="value" type="xsd:anyType">
                            <xsd:annotation>
                                <xsd:documentation>
                                    The elements and values of queried properties.
                                    Multi-valued properties are not allowed here.
                                    Use "and" or "or" clauses if needed.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:any namespace="##other" processContents="strict">
                        	<xsd:annotation>
                        		<xsd:documentation>
                        			Extensibility point for various expression languages and other
                        			"value derivation" mechanisms.
                        		</xsd:documentation>
                        	</xsd:annotation>
                        </xsd:any>
                    </xsd:choice>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="PropertyNoValueFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:FilterType">
                <xsd:sequence>
                    <xsd:element name="property" type="t:XPathType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:element name="equal" substitutionGroup="tns:filter" type="tns:PropertyComplexValueFilterType"/>
    <xsd:element name="greaterOrEqual" substitutionGroup="tns:filter" type="tns:PropertySimpleValueFilterType"/>
    <xsd:element name="lessOrEqual" substitutionGroup="tns:filter" type="tns:PropertySimpleValueFilterType"/>

    <!-- Following element should be constrained a bit more, because their value 
		is always string respectively. But we don't know how to constrain it now 
		and we do not have the time to find out. Therefore it should be OK for now. -->
    <xsd:element name="substring" substitutionGroup="tns:filter" type="tns:PropertySimpleValueFilterType"/>

<xsd:element name="org" substitutionGroup="tns:filter" type="tns:PropertyComplexValueFilterType"/>
<xsd:element name="orgRef" substitutionGroup="tns:filter" type="tns:PropertySimpleValueFilterType"/>
<xsd:element name="maxDepth" substitutionGroup="tns:filter" type="tns:PropertySimpleValueFilterType"/>
<xsd:element name="minDepth" substitutionGroup="tns:filter" type="tns:PropertySimpleValueFilterType"/>
<xsd:element name="ref" substitutionGroup="tns:filter" type="tns:PropertySimpleValueFilterType"/>

    <xsd:element name="present" substitutionGroup="tns:filter" type="tns:PropertyNoValueFilterType"/>
    <xsd:element name="true" substitutionGroup="tns:filter" type="tns:PropertyNoValueFilterType"/>

    <xsd:complexType name="LogicalOperatorFilterType" abstract="true">
        <xsd:complexContent>
            <xsd:extension base="tns:FilterType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="UnaryLogicalOperatorFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:LogicalOperatorFilterType">
                <xsd:sequence>
                    <xsd:element ref="tns:filter"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="NAryLogicalOperatorFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:LogicalOperatorFilterType">
                <xsd:sequence>
                    <xsd:element ref="tns:filter" minOccurs="1" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="and" substitutionGroup="tns:filter" type="tns:NAryLogicalOperatorFilterType"/>
    <xsd:element name="or" substitutionGroup="tns:filter" type="tns:NAryLogicalOperatorFilterType"/>
    <xsd:element name="not" substitutionGroup="tns:filter" type="tns:UnaryLogicalOperatorFilterType"/>

</xsd:schema>

