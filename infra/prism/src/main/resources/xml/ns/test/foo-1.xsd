<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2012 Evolveum
  ~
  ~ The contents of this file are subject to the terms
  ~ of the Common Development and Distribution License
  ~ (the License). You may not use this file except in
  ~ compliance with the License.
  ~
  ~ You can obtain a copy of the License at
  ~ http://www.opensource.org/licenses/cddl1 or
  ~ CDDLv1.0.txt file in the source code distribution.
  ~ See the License for the specific language governing
  ~ permission and limitations under the License.
  ~
  ~ If applicable, add the following below the CDDL Header,
  ~ with the fields enclosed by brackets [] replaced by
  ~ your own identifying information:
  ~
  ~ Portions Copyrighted 2012 [name of copyright owner]
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/test/foo-1.xsd"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/test/foo-1.xsd"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-2"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-2"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
            elementFormDefault="qualified"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            Testing schema for Prism framework
        </xsd:documentation>
        <xsd:appinfo>
            <jaxb:globalBindings>
                <xjc:typeSubstitution type="complex" />
                <xjc:serializable uid="201202081233" />
            </jaxb:globalBindings>
        </xsd:appinfo>
    </xsd:annotation>
    
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    
    <xsd:import namespace="http://www.w3.org/2001/XMLSchema" schemaLocation="http://www.w3.org/2001/XMLSchema">
        <xsd:annotation>
            <xsd:documentation>
                Importing the schema of XSD schema definition explicitly. This causes that we can use "strict" matching
                for the xsd:schema elements used in runtime.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://www.w3.org/2001/04/xmlenc#" schemaLocation="http://www.w3.org/2001/04/xmlenc#">
        <xsd:annotation>
            <xsd:documentation>
                The XML Encryption schema. Used for "protected" data types (property encryption).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>
    
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-2" schemaLocation="http://prism.evolveum.com/xml/ns/public/types-2">
        <xsd:annotation>
            <xsd:documentation>
                The XML Encryption schema. Used for "protected" data types (property encryption).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>
    
    <xsd:element name="name" type="t:PolyStringType"/>
    <xsd:element name="displayName" type="xsd:string"/>
    <xsd:element name="description" type="xsd:string"/>
    <xsd:element name="extension">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax">
                </xsd:any>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <!-- Basic Object Types -->

    <xsd:complexType name="ObjectType" abstract="true">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
                <a:object/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="tns:name" minOccurs="0">
            	<xsd:annotation>
            		<xsd:appinfo>
            			<a:displayName>Name</a:displayName>
            			<a:displayOrder>0</a:displayOrder>
            			<a:help>Short unique name of the object</a:help>
            		</xsd:appinfo>
            	</xsd:annotation>
            </xsd:element>
            <xsd:element ref="tns:description" minOccurs="0"/>
            <xsd:element ref="tns:extension" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:appinfo>
            			<a:displayName>Extension</a:displayName>
            			<a:displayOrder>1000</a:displayOrder>
            			<a:help>Object extension contains extra properties</a:help>
            		</xsd:appinfo>
            	</xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="oid" type="xsd:string" use="optional"/>
        <xsd:attribute name="version" type="xsd:string" use="optional"/>
    </xsd:complexType>
    <xsd:element name="object" type="tns:ObjectType"/>

    <xsd:complexType name="UserType">
        <xsd:complexContent>
            <xsd:extension base="tns:ObjectType">
                <xsd:sequence>
                	<!-- Single-valued properties -->
                    <xsd:element name="fullName" type="xsd:string">
                    	<xsd:annotation>
                    		<xsd:appinfo>
                    			<a:displayName>Full Name</a:displayName>
                    			<a:displayOrder>10</a:displayOrder>
		            			<a:help>User full name</a:help>
                    		</xsd:appinfo>
                    	</xsd:annotation>
                    </xsd:element>
                    <xsd:element name="givenName" type="xsd:string"/>
                    <xsd:element name="familyName" type="xsd:string"/>
                    <!-- Multi-valued property -->
                    <xsd:element name="additionalNames" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="polyName" type="t:PolyStringType" minOccurs="0"/>
                    <xsd:element name="locality" type="xsd:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Multi-valued container -->
                    <xsd:element name="assignment" type="tns:AssignmentType" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- Single-valued container -->
                    <xsd:element name="activation" type="tns:ActivationType" minOccurs="0">
                    	<xsd:annotation>
		            		<xsd:appinfo>
		            			<a:displayName>Activation</a:displayName>
		            			<a:displayOrder>1200</a:displayOrder>
		            			<a:help>User activation properties</a:help>
		            		</xsd:appinfo>
		            	</xsd:annotation>
                    </xsd:element>
                    <xsd:element name="account" type="tns:AccountType" minOccurs="0" maxOccurs="unbounded">
                    	<xsd:annotation>
                    		<xsd:appinfo>
                    			<a:objectReference>tns:accountRef</a:objectReference>
                    		</xsd:appinfo>
                    	</xsd:annotation>
                    </xsd:element>
                    <xsd:element name="accountRef" type="tns:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                    	<xsd:annotation>
                    		<xsd:appinfo>
                    			<a:objectReferenceTargetType>tns:AccountType</a:objectReferenceTargetType>
                    		</xsd:appinfo>
                    	</xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="user" type="tns:UserType"/>
    
    <xsd:complexType name="ObjectReferenceType">
        <xsd:annotation>
            <xsd:documentation>
                Reference to an object. It contains OID of the object that it refers to.
            </xsd:documentation>
            <xsd:appinfo>
            	<a:objectReference/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="description" type="xsd:string" minOccurs="0" maxOccurs="1">
        		<xsd:annotation>
        			<xsd:documentation>
        				Free-form description of this reference. Usually used to describe the purpose of
        				a search filter embedded in the reference.
        			</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="filter" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Filter that can be used to dynamically lookup the reference OID e.g. during imports.
                        It must not be used for normal operations and references with the filter must not
                        be stored in the repository.
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                	<xsd:sequence>
                		<xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
                	</xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="oid" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Target of the reference.

                    Optional only during imports. The objects stored in the repository must have the OID
                    value filled in.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="type" type="xsd:QName" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    XSD type of the reference target object.

                    It should be provided if the type is known (e.g. when
                    reading object from the repository).

                    The primary reason for this is to have some kind of
                    type safety but especially to be able to use
                    this in the XPaths that specify what references to resolve.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>
    
    
    <xsd:complexType name="AccountType">
        <xsd:complexContent>
            <xsd:extension base="tns:ObjectType">
                <xsd:sequence>
                	<xsd:element name="attributes" type="tns:AttributesType" minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="account" type="tns:AccountType"/>

    <xsd:complexType name="AssignmentType">
    	<xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="description" type="xsd:string" minOccurs="0"/>
        	<xsd:element name="accountConstruction" type="tns:AccountConstructionType" minOccurs="0"/>
        	<xsd:element name="activation" type="tns:ActivationType" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string" use="optional"/>
    </xsd:complexType>
    
    <xsd:complexType name="AccountConstructionType">
    	<xsd:annotation>
    		<xsd:documentation>
    			Account construction type is NOT a container. It is a complex-type property.
    			This tests the ability to deal with complex type properties and also with
    			dateTime fields in them.
    		</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="howto" type="xsd:string"/>
        	<xsd:element name="when" type="xsd:dateTime" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

	<xsd:complexType name="ActivationType">
    	<xsd:annotation>
    		<xsd:documentation>
    			ActivationTyps is a container, therefore the following elements are properties.
    			This tests the ability to deal with boolean and dateTime properties.
    		</xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="enabled" type="xsd:boolean"/>
        	<xsd:element name="validFrom" type="xsd:dateTime" minOccurs="0"/>
        	<xsd:element name="validTo" type="xsd:dateTime" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="AttributesType">
    	<xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="DummyProtectedStringType">
    	<xsd:annotation>
    		<xsd:documentation>
    			This type mimmicks a complex type that may be used in properties.
    		</xsd:documentation>
    	</xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="value" type="xsd:string"/>
        </xsd:sequence>
    </xsd:complexType>

</xsd:schema>

