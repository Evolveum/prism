/*
 * Copyright (c) 2019 Evolveum
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2014.02.04 at 01:34:24 PM CET
//


package com.evolveum.prism.xml.ns._public.types_3;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;


/**
 * WARNING: this is NOT a generated code.
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PolyStringTranslationType", propOrder = {
    "key",
    "fallback",
    "fallbackTranslation",
    "argument"
})
public class PolyStringTranslationType implements Serializable, Cloneable {
	private static final long serialVersionUID = 1L;

	public static final QName COMPLEX_TYPE = new QName("http://prism.evolveum.com/xml/ns/public/types-3", "PolyStringTranslationType");

	@XmlElement(required = true)
    protected String key;
    protected String fallback;
    protected PolyStringTranslationType fallbackTranslation;
    protected final List<PolyStringTranslationArgumentType> argument = new ArrayList<>();

	public String getKey() {
		return key;
	}

	public void setKey(String key) {
		this.key = key;
	}

	public String getFallback() {
		return fallback;
	}

	public void setFallback(String fallback) {
		this.fallback = fallback;
	}
	
	public PolyStringTranslationType getFallbackTranslation() {
		return fallbackTranslation;
	}

	public void setFallbackTranslation(PolyStringTranslationType fallbackTranslation) {
		this.fallbackTranslation = fallbackTranslation;
	}

	public List<PolyStringTranslationArgumentType> getArgument() {
		return argument;
	}

    @Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((argument == null) ? 0 : argument.hashCode());
		result = prime * result + ((fallback == null) ? 0 : fallback.hashCode());
		result = prime * result + ((fallbackTranslation == null) ? 0 : fallbackTranslation.hashCode());
		result = prime * result + ((key == null) ? 0 : key.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PolyStringTranslationType other = (PolyStringTranslationType) obj;
		if (argument == null) {
			if (other.argument != null)
				return false;
		} else if (!argument.equals(other.argument))
			return false;
		if (fallback == null) {
			if (other.fallback != null)
				return false;
		} else if (!fallback.equals(other.fallback))
			return false;
		if (fallbackTranslation == null) {
			if (other.fallbackTranslation != null)
				return false;
		} else if (!fallbackTranslation.equals(other.fallbackTranslation))
			return false;
		if (key == null) {
			if (other.key != null)
				return false;
		} else if (!key.equals(other.key))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "PolyStringTranslationType(key=" + key + ", fallback=" + fallback + ", fallbackTranslation="
				+ fallbackTranslation + ", argument=" + argument + ")";
	}

	@Override
    public PolyStringTranslationType clone() {
        PolyStringTranslationType cloned = new PolyStringTranslationType();
        cloned.setKey(getKey());
        cloned.setFallback(getFallback());
        if (getFallbackTranslation() != null) {
        	cloned.setFallbackTranslation(getFallbackTranslation().clone());
        }
        for (PolyStringTranslationArgumentType argument : getArgument()) {
            cloned.getArgument().add(argument.clone());
        }
        return cloned;
    }
}
