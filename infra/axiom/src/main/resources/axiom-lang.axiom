model axiom-lang {

    namespace "https://ns.evolveum.com/axiom/language";

    root model {
        documentation """
            Axiom Model

            Declares a new axiom model.
            """;
        type AxiomModel;
    }

    type AxiomModel {
        extends AxiomBaseDefinition;

        item namespace {
            type string;
        }

        item version {
            type string;
        }

        item import {
            type AxiomImportDeclaration;
        }

        item root {
            documentation """
              Root Definition

              Root Definition defines allowed root for serialized documents
              modeled by Axiom language.
            """;
            type AxiomRootDefinition;
        }

        item type {
            type AxiomTypeDefinition;
            documentation """
                Type Declaration

                type statement declares a new global type, which is available
                to model items.
            """;
        }

        item mixin {
            type AxiomMixinDefinition;
            documentation """
                Mixin Declaration, declares a new global mixin, aset of reusable item 
                definitions, which can be used in type definitions.
            """;
        }

        item extension {
            type AxiomExtensionDefinition;
        }

        // TODO move to prism schema; consider renaming to objectType?
        item object {
            type PrismObjectDefinition;
        }

        // TODO move to prism schema; consider renaming to containerType?
        item container {
            type PrismContainerDefinition;
        }

        // TODO move to prism schema; consider renaming to referenceType?
        item reference {
            type PrismReferenceDefinition;
        }

        // TODO move to prism schema
        item item {
            type PrismItemDefinition;
        }
    }

    type AxiomImportDeclaration {
        argument prefix;

        item prefix {
            type AxiomIdentifier;
        }

        item namespace {
            type string;
        }
    }

    type AxiomRootDefinition {
        extends AxiomItemDefinition;
        identifier name {
            scope global;
            space AxiomRootDefinition;
        }
    }

    type AxiomBaseDefinition {
        argument name;

        item name {
            type AxiomIdentifier;
        }

        item documentation {
            type string;
        }

        item since {
            type SemanticVersion;
        }
        //item status {
        //    documentation """
        //        Status of definition, could be experimental, stable, deprecated.
        //        """;
        //    type string;
        //}
    }

    type AxiomIdentifierDefinition {
         argument key;
         item key {
            type AxiomIdentifier;
            minOccurs "1";
         }
         item scope {
            type string;
            minOccurs "1";
         }
         item space {
            type AxiomIdentifier;
            minOccurs "1";
         }
    }

    type AxiomTypeDefinition {
        extends AxiomBaseDefinition;

        identifier name {
            scope global;
            space AxiomTypeDefinition;
        }

        item argument {
            type AxiomIdentifier;
        }

        item extends {
            type AxiomTypeReference;
        }

        item uses {
            type AxiomTypeReference;
        }

        item identifier {
            type AxiomIdentifierDefinition;
        }

        // TODO move to prism schema
        item object {
            type boolean;
        }

        // TODO move to prism schema
        item container {
            type boolean;
        }

        // TODO move to prism schema
        item objectReference {
            type boolean;
        }

        // TODO reconsider this - strictly speaking this is part of "global type+item definition combo"
        item itemName {
            type AxiomIdentifier;
        }

        item item {
            type AxiomItemDefinition;
        }
    }

    type AxiomIdentifier {
    }

    type AxiomItemDefinition {
        extends AxiomBaseDefinition;

        identifier name {
            space AxiomItemDefinition;
            scope local;
        }

        item type {
            type AxiomTypeReference;
        }
        item minOccurs {
            type string;
        }
        item maxOccurs {
            type string;
        }
    }

    type AxiomReference {
        item targetType {
            type AxiomTypeReference;
        }
    }

    type AxiomTypeReference {
        //type AxiomIdentifier;
        //reference {
        //    scope global;
        //    space AxiomTypeDefinition;
        //    argument name;
        //}
    }

    type AxiomMixinDefinition {
        extends AxiomTypeDefinition;
    }

    type AxiomExtensionDefinition {
        extends AxiomMixinDefinition;
        item target {
            type AxiomTypeReference;
        }
    }

    // "Type library" (temporary)



    type SemanticVersion {
        extends string;
    }

    // TODO move to prism schema; probably should be prism:ObjectDefinition
    type PrismObjectDefinition {
        extends AxiomTypeDefinition;
    }

    // TODO move to prism schema; probably should be prism:ContainerDefinition
    type PrismContainerDefinition {
        extends AxiomTypeDefinition;
    }

    // TODO move to prism schema; probably should be prism:ReferenceDefinition
    type PrismReferenceDefinition {
        extends AxiomTypeDefinition;
    }

    // TODO move to prism schema; probably should be prism:ItemDefinition
    type PrismItemDefinition {
        extends AxiomItemDefinition;
    }
}
