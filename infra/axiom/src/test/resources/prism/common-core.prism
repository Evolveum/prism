// Copyright (c) 2020 Evolveum and contributors
//
// This work is dual-licensed under the Apache License 2.0
// and European Union Public License. See LICENSE file for details.

// This is "common-core.axiom" file containing core definitions from the common-3 namespace.
// Due to its size the common-3 schema is distributed across multiple files.

prism:model common-core {

    namespace "http://midpoint.evolveum.com/xml/ns/public/common/common-3";
    version "3.0.0";

    import "http://midpoint.evolveum.com/xml/ns/public/common/prism" {
        prefix prism;
    }

    type Object {
        object;
        itemName object;
        documentation """
            Common supertype for all identity objects. Defines basic properties
            that each object must have to live in our system (identifier, name).

            All objects are identified by ﻿OID﻿﻿. The OID is an immutable identifier
            (usually UUID). Except the OID all the objects have human-readable name.
            The name is usually unique for each object type, but this is not a
            strict requirement.

            Note: object type is fixed, it cannot be changed. The object retains its
            type from the time it was created to the end of its life.
        """;
        item name {
            type PolyString;
            documentation """
                Human-readable, mutable name of the object. It
                may also be an identifier (login name, group name).
                It is usually unique in the respective context of
                interpretation. E.g. the name of the UserType subtype
                is usually unique in the whole system.
                The name of the ShadowType subtype is usually unique in the
                scope of resource (target system) that it belongs to.

                The name may not be human-readable in a sense to display
                to a common end-user. It is intended to be displayed to
                IDM system administrator. Therefore it may contain quite
                a "ugly" structures such as LDAP DN or URL.

                Name is mutable. It is considered to be ordinary property
                of the object. Therefore it can be changed by invoking
                usual modifyObject operations. However, change of the name
                may have side effects (rename process).

                Although name is specified as optional by this schema, it
                is in fact mandatory for most object types. The reason for
                specifying the name as optional is that the name may be
                generated by the system instead of supplied by the clients.
                However, all objects stored in the repository must have a name.
            """;
            // <a:displayName>ObjectType.name</a:displayName>
            // <a:displayOrder>0</a:displayOrder>
            // <a:emphasized>true</a:emphasized>
        }

        // Note: the description property is referenced from various contexts (e.g. Object and Assignment).
        // To avoid duplication we use global property definition.
        // item description; // TODO make this work

        // The same is true for documentation.
        // item documentation; // TODO make this work

        item subtype {
            type String;
            maxOccurs unbounded;
            documentation """
                Type of the object. It is used to distinguish what a specific object
                represents. Whether it is a different kind of organizational unit, project,
                team, or different kind of user, etc.
            """;
            // <a:displayName>ObjectType.subtype</a:displayName>
            // <a:displayOrder>15</a:displayOrder>
        }

        item fetchResult {
            type OperationResult;
            documentation """
                Result of the operation that fetched this instance of the object.
                It is mostly used to indicate that the object is not complete or
                there is some problem with the object. This is used instead of
                exception if the object is part of larger structures (lists as in
                list/search operations or composite objects). If not present then
                the "SUCCESS" state is assumed.

                This field is TRANSIENT. It must only be used in runtime. It should
                never be stored in the repository.
            """;
            // a:operational
        }

        // item extension; // TODO make this work

        item trigger {
            type Trigger;
            maxOccurs unbounded;
            documentation """
                Triggers for this object. They drive invocations of corresponding trigger handlers
                at specified time.
            """;
            // a:operational
        }

        item parentOrg { // TODO or should we use 'Ref' suffix i.e. 'parentOrgRef'?
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                Set of the orgs (organizational units, projects, teams) that the object relates to.
                This usually means that the object belongs to them but it may have other meanings as well
                (e.g. user manages an organizational unit).
            """;
            // <a:objectReferenceTargetType>tns:OrgType</a:objectReferenceTargetType>
            // <a:displayName>OrgType.parentOrganization</a:displayName>
            // <a:displayOrder>240</a:displayOrder>
            // <a:operational/>
        }

        item tenant {
            type ObjectReference;
            documentation """
                Reference to the tenant to which this object belongs. It is a computed value set automatically
                by midPoint. It is determined from the organizational structure. Even though this value is
                computed it is also stored in the repository due to performance reasons.
            """;
            // <a:objectReferenceTargetType>tns:OrgType</a:objectReferenceTargetType>
            // <a:displayName>OrgType.tenant</a:displayName>
            // <a:displayOrder>250</a:displayOrder>
            // <a:operational>true</a:operational>
        }

        item lifecycleState {
            type String;
            documentation """
                Lifecycle state of the object. This property defines whether the
                object represents a draft, proposed definition, whether it is active,
                deprecated, and so on.

                There are few pre-defined lifecycle states. But custom lifecycle states
                may also be defined. Pre-defined lifecycle states are:

                - draft: Definition of the new object in progress. The object is
                         NOT active. The definition may change at any moment. It is
                         not ready yet.
                - proposed: Definition of a new object is ready for use, but there
                            is still a review process to be applied (e.g. approval).
                            The object is NOT active. However the definition should
                            not change in this state.
                - active: Active and working definition. Ready to be used without
                          any unusual limitations.
                - deprecated: Active definition which is being phased out. The
                              definition is still fully operational. But it should not
                              be used for new assignments. E.g. it should not be requested,
                              it should not be approved, etc.
                - archived: Inactive historical definition. It is no longer used.
                            It is maintained only for historical, auditing and
                            sentimental reasons.
                - failed: Unexpected error has occurred dUring object lifecycle. Result
                            of that event is that the object is rendered inactive.
                            The situation cannot be automatically remedied. Manual action
                            is needed.
            """;
            // <a:displayName>ObjectType.lifecycleState</a:displayName>
            // <a:displayOrder>20</a:displayOrder>
            since "3.5";
            // <a:valueEnumerationRef oid="00000000-0000-0000-0000-000000000230" type="tns:LookupTableType"/>
        }

        item operationExecution {
            type OperationExecution;
            maxOccurs unbounded;
            documentation """
                Description of recent operations executed on this object (or related objects, e.g. shadows
                in case of a focal object). The number of operations to be kept here is configurable.
            """;
            since "3.6";
            // <a:operational>true</a:operational>
        }

        item lensContext {
            type LensContext;
            documentation """
                Model context describing executed operation.
            """;
            since "4.0";
            // <a:experimental>true</a:experimental>
        }

        item policySituation {
            type Uri;
            maxOccurs unbounded;
            documentation """
                The policy situation(s) of this object. The situations are result of
                evaluation of the policy rules. This property is recorded for each object
                and can be used for reporting, diagnostics, target selection in certification
                campaigns, etc.
            """;
            since "3.5";
            // <a:operational>true</a:operational>
        }

        item policyException {
            type PolicyException;
            maxOccurs unbounded;
            documentation """
                Recorded exception from a policy rule. The exceptions that are approved are
                recoded here to avoid re-evaluating and re-approving them all the time.
                This is EXPERIMENTAL functionality. It is likely to change in the near future.
            """;
            since "3.5";
            // <a:experimental>true</a:experimental>
        }

        item diagnosticInformation {
            type DiagnosticInformation;
            maxOccurs unbounded;
            documentation """
                Diagnostic information attached to this object.
            """;
            since "4.0";
            // <a:experimental>true</a:experimental>
        }

        // Note that oid and version are not defined here. These are intrinsic parts of prism objects
        // so they do not have to be mentioned in the schema.
        // TODO: is this OK? See also related questions in ObjectReference type.
    }

    type AssignmentHolder {
        supertype Object;
        itemName assignmentHolder;
        documentation """
            Abstract supertype for all object types that can have assignments.
        """;

        item assignment {
            type Assignment;
            maxOccurs unbounded;
            documentation """
                Set of object's assignments.
                Assignments define the privileges and "features" that this object should have, that
                this object is entitled to. Typical assignment will point to a role or define
                a construction of an account.

                Assignments represent what the object SHOULD HAVE. The assignments represent a policy,
                a desired state of things (cf. linkRef).
            """;
            // <a:displayName>FocusType.assignmentKey</a:displayName>
        }

        item iteration {
            type Integer; // TODO
            documentation """
                Iteration number. Starts with 0. It is used to iteratively find unique identifier
                for the object.
            """;
            // <a:operational>true</a:operational>
        }

        item iterationToken {
            type String;
            documentation """
                Iteration token. String value that is usually a suffix to the identifier based
                on iteration number. E.g. ".007". It is used to iteratively find unique identifier
                for the object.
            """;
            // <a:operational>true</a:operational>
        }

        item archetype {
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                References to all applicable archetypes, including "indirect" archetypes such as archetype supertypes.
                Contains references to active archetypes only.

                Note: the value of this reference is only updated when object is recomputed.
                Therefore if a role definition changes then all the affected objects must be recomputed
                for this reference to be consistent.

                This is an operational property. It is set and managed by the system. It is used
                for efficient use of archetypes.
            """;
            // <a:objectReferenceTargetType>tns:ArchetypeType</a:objectReferenceTargetType>
            // <a:operational>true</a:operational>
            // <a:displayName>AssignmentHolderType.archetypeRef</a:displayName>
            since "4.0";
        }

        item roleMembership {
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                References to abstract roles (roles, orgs, services) that this focus currently belongs to - directly
                or indirectly. This reference points to all the roles in the role hierarchy. It only points to
                the roles that were evaluated as active dUring last recompute (conditions were true, validity
                constraints not violated).

                Note: the value of this reference is only updated when a focal object is recomputed.
                Therefore if a role definition changes then all the affected focal objects must be recomputed
                for this reference to be consistent.

                Roles mentioned here are those that are NOT obtained via delegation, i.e. "deputy" relations.
                Relations acquired by delegation are listed in delegatedRef item.

                This is an operational property. It is set and managed by the system. It is used
                for efficient search of all current role members, e.g. for the purpose of displaying this
                information in the GUI.
            """;
            // <a:objectReferenceTargetType>tns:AbstractRoleType</a:objectReferenceTargetType>
            // <a:operational>true</a:operational>
            // <a:displayName>FocusType.roleMembershipRef</a:displayName>
        }

        item delegated {
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                References to objects (abstract roles as well as users) obtained via delegation.
                If A1 is a deputy of A, its delegatedRef contains a union of A, A.roleMembershipRef and
                A.delegatedRef.

                This is an operational property. It is set and managed by the system. It is used
                for efficient search of all current role members, e.g. for the purpose of displaying this
                information in the GUI.
            """;
            // <a:objectReferenceTargetType>tns:FocusType</a:objectReferenceTargetType>
            // <a:operational>true</a:operational>
            since "3.5";
        }

        item roleInfluence {
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                References to abstract roles (roles and orgs) that this focus may directly belong to.
                This reference only points to the next role in the hierarchy. However, it is backed by
                a "closure" index in the repository subsystem. Therefore it can efficiently support tree-like
                queries. This reference points to the roles for whose the condition is not true.
                Therefore it does not reliably show
                who actually has a role. It shows potential role members - all the object that are possibly
                influenced when a role definition changes.

                This is an operational property. It is set and managed by the system. It is used
                for efficient search of all possible role members, e.g. for the purpose of recomputing
                all role members after the role definition is changed.

                TODO. NOT IMPLEMENTED YET. EXPERIMENTAL. UNSTABLE.
            """;
            // <a:objectReferenceTargetType>tns:AbstractRoleType</a:objectReferenceTargetType>
            // <a:operational>true</a:operational>
        }
    }

    type Focus {
        supertype AssignmentHolder;
        itemName focus;
        documentation """
            Abstract supertype for all object types that can be focus of full midPoint computation.
            This basically means objects that have projections. But focal objects also have
            activation, they may have personas, etc.
        """;
        item link {
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                Set of shadows (projections) linked to this focal object.
                E.g. a set of accounts linked to a user. This is the set of
                shadows that belongs to the focal object in a sense
                that these shadows represents the focal object on the resource.
                E.g. The set of accounts that represent the same midPoint user (the
                same physical person, they are "analogous").

                Links define what the object HAS. The links reflect real state of things
                (cf. assignment).
            """;
            // <a:objectReferenceTargetType>tns:ShadowType</a:objectReferenceTargetType>
        }

        item persona {
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                Set of personas linked to this focal object.
                E.g. a set of virtual identities linked to a user. This is the set of
                "secondary" focal objects that belongs to this focal object in a sense
                that the current focal object is in control over the linked focal objects.
                E.g. this reference can be used to link user object which specified a physical
                person with his virtual identities (personas) that specify his identity as an
                employee, system administrator, customer, etc.
                The default meaning is that the personas are "analogous", i.e. the represent
                different facets of the same physical person. However, this meaning may be
                theoretically overridden by using various relation parameters in this reference.

                This reference define what the object HAS. The links reflect real state of
                things (cf. assignment).
            """;
            // <a:objectReferenceTargetType>tns:FocusType</a:objectReferenceTargetType>
            since "3.6";
        }

        item activation {
            type Activation;
        }

        item jpegPhoto {
            type Binary;
            documentation """
                Photo corresponding to the user / org / role / service.
            """;
            // <a:displayName>FocusType.jpegPhoto</a:displayName>
        }

        item costCenter {
            type String;
            documentation """
                The name, identifier or code of the cost center to which the object belongs.

                Please note that organization objects (OrgType) also have a costCenter property.
                Therefore it is usual that if a user belongs to an organization the costCenter from
                the organization is used. Therefore this property is usually used only for users that
                do not belong to any organization or for users that have different cost center than
                the one defined by the organization.
            """;
            // <a:displayName>FocusType.costCenter</a:displayName>
            // <a:displayOrder>420</a:displayOrder>
        }

        item locality {
            type PolyString;
            documentation """
                Primary locality of the object, the place where
                the (e.g.) user usually works, the country, city or
                building that he belongs to. The specific meaning
                and form of this property is deployment-specific.
            """;
            // <a:displayName>FocusType.locality</a:displayName>
            // <a:displayOrder>450</a:displayOrder>
        }

        item preferredLanguage {
            type String;
            documentation """
                Indicates user's preferred language, usually for the purpose of localizing
                user interfaces. The format is IETF language tag defined in BCP 47, where
                underscore is used as a subtag separator. This is usually a ISO 639-1 two-letter
                language code optionally followed by ISO 3166-1 two letter country code
                separated by underscore. The languages that do not have country-specific
                variants are usually specified by using a two-letter country code ("sk",
                "cs", "tr"). Languages with country-specific variants have country-specific
                subtags ("pt_BR", "zn_CN").
                If no value is specified in this property then system default locale is assumed.

                Examples:
                 - en_US
                 - sk
                 - cs
                 - pt_BR
            """;
            // <a:displayName>FocusType.preferredLanguage</a:displayName>
            // <a:displayOrder>200</a:displayOrder>
            // <a:valueEnumerationRef oid="00000000-0000-0000-0000-000000000200" type="tns:LookupTableType"/>
        }

        item locale {
            type String;
            documentation """
                Defines user's preference in displaying currency, dates and other items
                related to location and culture. The format is IETF language tag defined in BCP 47, where
                underscore is used as a subtag separator. This is usually a ISO 639-1 two-letter
                language code optionally followed by ISO 3166-1 two letter country code
                separated by underscore. The languages that do not have country-specific
                variants are usually specified by using a two-letter country code ("sk",
                "cs", "tr"). Languages with country-specific variants have country-specific
                subtags ("pt_BR", "zn_CN").
                If not specified then system default locale is assumed.

                Examples:
                 - en_US
                 - sk
                 - cs
                 - pt_BR
            """;
            // <a:displayName>FocusType.locale</a:displayName>
            // <a:displayOrder>210</a:displayOrder>
            // <a:valueEnumerationRef oid="00000000-0000-0000-0000-000000000210" type="tns:LookupTableType"/>
        }

        item timezone {
            type String;
            documentation """
                User's preferred timezone. It is specified in the "tz database" (a.k.a "Olson")
                format. If not specified then system default timezone is assumed.

                Examples:
                 - Europe/Bratislava
            """;
            // <a:displayName>FocusType.timezone</a:displayName>
            // <a:displayOrder>220</a:displayOrder>
            // <a:valueEnumerationRef oid="00000000-0000-0000-0000-000000000220" type="tns:LookupTableType"/>
        }

        item emailAddress {
            type String;
            documentation """
                E-Mail address of the user, org. unit, etc. This is the address
                supposed to be used for communication with the
                user, org. unit, etc. E.g. IDM system may send notifications
                to the e-mail address. It is NOT supposed to be
                full-featured e-mail address data structure
                e.g. for the purpose of complex address-book application.
            """;
            // <a:displayName>FocusType.emailAddress</a:displayName>
            // <a:displayOrder>300</a:displayOrder>
        }

        item telephoneNumber {
            type String;
            documentation """
                Primary telephone number of the user, org. unit, etc.
            """;
            // <a:displayName>FocusType.telephoneNumber</a:displayName>
            // <a:displayOrder>310</a:displayOrder>
        }

        item credentials {
            type Credentials;
            documentation """
                The set of focus's credentials (such as passwords).
            """;
            // <a:displayName>FocusType.credentials</a:displayName>
        }
    }

    type User {
        supertype Focus;
        documentation """
            User object represents a physical user of the system.
            It differs from the account, as "account" represents a data structure in a target system while
            "user" represents data structure in midPoint. One user typically has many accounts.
            Properties of User object typically describe the user as a physical person.
            Therefore the user object defines handful of properties that are commonly used to describe users
            in the IDM solutions (employees, customers, partners, etc.) Custom extensions are possible by utilizing
            the "extension" container.
        """;

        item fullName {
            type PolyString;
            documentation """
                Full name of the user with all the decorations,
                middle name initials, honorific title and any
                other structure that is usual in the cultural
                environment that the system operates in. This
                element is intended to be displayed to
                a common user of the system.

                Examples:
                 - cpt. Jack Sparrow
                 - William "Bootstrap" Turner
                 - James W. Random, PhD.
                 - Vladimir Iljic Lenin
                 - Josip Broz Tito
                 - Chuck Norris
            """;
            // <a:displayName>UserType.fullName</a:displayName>
            // <a:displayOrder>100</a:displayOrder>
            // <a:emphasized>true</a:emphasized>
        }

        item givenName {
            type PolyString;
            documentation """
                Given name of the user. It is usually the first
                name of the user, but the order of names may
                differ in various cultural environments. This
                element will always contain the name that was
                given to the user at birth or was chosen
                by the user.

                Examples:
                 - Jack
                 - Chuck
            """;
            // <a:displayName>UserType.givenName</a:displayName>
            // <a:displayOrder>110</a:displayOrder>
            // <a:emphasized>true</a:emphasized>
        }

        item familyName {
            type PolyString;
            documentation """
                Family name of the user. It is usually the last
                name of the user, but the order of names may
                differ in various cultural environments. This
                element will always contain the name that was
                inherited from the family or was assigned
                to a user by some other means.

                Examples:
                 - Sparrow
                 - Norris
            """;
            // <a:displayName>UserType.familyName</a:displayName>
            // <a:displayOrder>120</a:displayOrder>
            // <a:emphasized>true</a:emphasized>
        }

        item additionalName {
            type PolyString;
            documentation """
                Middle name, patronymic, matronymic or any other name of a person. It is usually the
                middle component of the name, however that may be culture-dependent.

                Examples:
                 - Walker
                 - John
                 - Iljic
            """;
            // <a:displayName>UserType.additionalName</a:displayName>
            // <a:displayOrder>130</a:displayOrder>
        }

        item nickName {
            type PolyString;
            documentation """
                Familiar or otherwise informal way to address a person.

                Examples:
                 - Bootstrap
                 - Bobby<

                The meaning of this property is to take part in the formatted full
                name of the person, e.g. William "Bootstrap" Turner. It is not intended
                to be used as a username or login name. This value is usually changeable
                by the user itself and it defines how the user wants other to address him.
                Therefore it is not ideal for use as an identifier.
            """;
            // <a:displayName>UserType.nickname</a:displayName>
            // <a:displayOrder>140</a:displayOrder>
        }

        item honorificPrefix {
            type PolyString;
            documentation """
                Honorific titles that go before the name.
                Examples:
                 - cpt.
                 - Ing.
                 - Sir

                This property is single-valued. If more
                than one title is applicable, they have to be represented in
                a single String (concatenated) form in the correct order.
            """;
            // <a:displayName>UserType.honorificPrefix</a:displayName>
            // <a:displayOrder>150</a:displayOrder>
        }

        item honorificSuffix {
            type PolyString;
            documentation """
                Honorific titles that go after the name.

                Examples:
                 - PhD.
                 - KBE

                This property is single-valued. If more
                than one title is applicable, they have to be represented in
                a single String (concatenated) form in the correct order.
            """;
            // <a:displayName>UserType.honorificSuffix</a:displayName>
            // <a:displayOrder>160</a:displayOrder>
        }

        item title {
            type PolyString;
            documentation """
                User's title defining a work position or a primary role in the
                organization.
                Examples:
                 - CEO
                 - SecUrity Officer
                 - Assistant
            """;
            // <a:displayName>UserType.title</a:displayName>
            // <a:displayOrder>170</a:displayOrder>
        }

        item employeeNumber {
            type String;
            documentation """
                Unique, business-oriented identifier of the employee.
                Typically used as correlation identifier and for
                auditing purposes. Should be immutable, but the
                specific properties and usage are deployment-specific.
            """;
            // <a:displayName>UserType.employeeNumber</a:displayName>
            // <a:displayOrder>400</a:displayOrder>
        }

        item employeeType {
            type String;
            maxOccurs unbounded;
            documentation """
                Employee type specification such as internal employee,
                external or partner. The specific values are
                deployment-specific. However it is generally assumed that this
                will be enumeration of several type names or codes that define
                "classes" of users.

                Even though this property is named "employeeType" due to the historical
                reasons it is used in a more generic way to mean general type of user.
                Therefore it can be used to distinguish employees from customers, etc.

                DEPRECATED: Use ObjectType.subtype
            """;
            // <a:displayName>UserType.employeeType</a:displayName>
            // <a:displayOrder>410</a:displayOrder>
            // <a:deprecated>true</a:deprecated>
            // <a:deprecatedSince>3.8</a:deprecatedSince>
        }
        item organization {
            type PolyString;
            maxOccurs unbounded;
            documentation """
                Name or (preferably) immutable identifier of organization that the user belongs to.
                The format is deployment-specific. This property together with organizationalUnit
                may be used to provide easy-to-use data about organizational membership of the user.

                This is multi-valued property to allow membership of a user to several
                organizations. Please note that midPoint does not maintain ordering in
                multi-value properties therefore this is not usable to model a complex
                organization hierarchies. Use OrgType instead.
            """;
            // <a:displayName>UserType.organization</a:displayName>
            // <a:displayOrder>430</a:displayOrder>
        }

        item organizationalUnit {
            type PolyString;
            maxOccurs unbounded;
            documentation """
                Name or (preferably) immutable identifier of organizational unit that the user belongs to.
                The format is deployment-specific. This property together with organization
                may be used to provide easy-to-use data about organizational membership of the user.

                This is multi-valued property to allow membership of a user to several
                organizational units. Please note that midPoint does not maintain ordering in
                multi-value properties therefore this is not usable to model a complex
                organization hierarchies. Use OrgType instead.
            """;
            // <a:displayName>UserType.organizationalUnit</a:displayName>
            // <a:displayOrder>440</a:displayOrder>
        }
        item adminGuiConfiguration {
            type AdminGuiConfiguration;
            documentation """
                Specifies the admin GUI configuration that should be used
                by this user.
            """;
            since "3.5";
            // <a:displayName>AdminGuiConfigurationType.adminGuiConfiguration</a:displayName>
        }
    }

    type ObjectReference {
        objectReference;
        documentation """
            Reference to an object. It contains OID of the object that it
            refers to.
        """;

        // item description; // TODO make this work

        // item documentation; // TODO make this work

        item filter {
            type SearchFilter; // TODO namespace of "query-3"
            documentation """
                Filter that can be used to dynamically lookup the reference OID e.g. dUring imports.
                It must not be used for normal operations. The filter may be stored in the repository
                to avoid data loss. But even if it is stored it will not be used beyond initial
                import or unless explicitly requested (e.g. by setting resolutionTime).

                Note: The filter will NOT be used if the OID in the reference is set. The OID always takes
                precedence.
            """;
        }

        item resolutionTime {
            type EvaluationTime;
            // TODO defaultValue "import";
            documentation """
                Definition of the "time" when the reference will be resolved. Resolving the reference means using
                the filter to get object(s) or OID(s).

                Import-time resolution means that the reference will be resolved once when the file is imported.
                OID will be recorded in the reference and then only the OID will be used to follow the reference.
                This is a very efficient method and it is the default.

                Run-time resolution means that the reference will be resolved every time that the reference is
                evaluated. This is less efficient but it provides great flexibility as the filter may contain
                expressions and therefore the reference target may dynamically change.
            """;
        }

        item referentialIntegrity {
            type ReferentialIntegrity;
            // TODO defaultValue "default";
            documentation """
                Definition of the behavior related to non-existence of object with specified target OID.
                (Currently supported only at selected places in midPoint.)
            """;
            since "4.1";
        }

        item targetName {
            type PolyString;
            documentation """
                Cached name of the target object.
                This is a ephemeral value. It is not stored in the repository.
                It may be computed at object retrieval time or it may not be present at all.
                This is NOT an authoritative information. Setting it or changing it will
                not influence the reference meaning. OID is the only authoritative linking
                mechanism.
            """;
        }

        // TODO what about (attributes) oid, type, and relation?
        //  Should they be listed here even if they are defined in PrismReferenceValue?
        //  But if not, why should we list filter, resolution time, referential integrity here,
        //  as they are also defined in PrismReferenceValue.
    }

    mixin Description {
        item description {
            type String;
            documentation """
                Free-form textual description of the object. It is supposed to describe
                the object or a construct that it is attached to.

                This information may be presented to midPoint users, even to ordinary end users.
                For example role description may be presented to users when they are selecting
                roles to request. Therefore the description should be written in a language that
                the users can understand.

                Description is assumed to be a plan, non-formatted text.
                Amount of white space is considered insignificant. E.g. leading and trailing
                white space may be skipped, multiple spaces can be collapsed to one and so on.
            """;
            // <a:displayName>ObjectType.description</a:displayName>
            // <a:displayOrder>10</a:displayOrder>
        }
    }

    mixin Documentation { 
        item documentation {
            type String;
            documentation """
                Technical documentation for a particular object or construct.

                The purpose of this element is to document system configuration and behavior.
                The documentation will not be presented to end users. In fact, it will probably
                not be presented at all in midPoint user interface. This documentation element
                is supposed to be a part of the technical documentation of midPoint deployment.
                The tools than generate deployment configuration will look for these elements
                and combine them to compiled documentation document.

                AsciiDoc formatting is assumed for this element. Any leading or trailing
                whitespace is skipped. Indentation equivalent to he indentation of the first
                non-blank line of text is also skipped.
            """;
            // <a:displayName>ObjectType.documentation</a:displayName>
            // <a:displayOrder>11</a:displayOrder>
        }
    }

    // Example of short version of container definition.
    container {
        name Assignment;
        itemName assignment;

        // item description; // TODO make this work
        // item documentation; // TODO make this work
        // item extension; // TODO make this work

        // ...
    }

    container {
        name Extension;
        itemName extension;
        documentation """
            Extension container that provides generic extensibility mechanism.
            Almost any extension property can be placed in this container.
            This mechanism is used to extend objects with new properties.
            The extension is treated exactly the same as other object
            properties by the code (storage, modifications, etc), except
            that the system may not be able to understand their meaning.
        """;
        // <a:displayName>ObjectType.extension</a:displayName>
        // <a:displayOrder>1000</a:displayOrder>
    }

    object GenericObject {
        supertype Focus;
        itemName genericObject;
        documentation """
            Generic object for storing unknown (unexpected) object types.

            The generic object should be used if there is a need to
            store a custom object (e.g KangarooType) at deployment-time.
            The properties of such custom objects are to be placed in the
            extension part of this object. The schema is not checked or
            enforced for this type of objects if technically possible.
        """;
        item objectType {
            type Uri; // TODO
            // deprecated
        }
    }

    container Trigger {
        itemName trigger;
        documentation """
            Defines triggers for an object. Trigger is an action that should take place
            at specified time or under some other condition.
        """;
        item timestamp {
            type DateTime; // TODO
            documentation """
                The time when a trigger needs to be activated.
            """;
        }
        item handlerUri {
            type Uri; // TODO
            documentation """
                Handler URI indirectly specifies which class is responsible to handle the task. The handler will
                to be used to handle trigger activation.
            """;
        }
        item originDescription {
            type String;
            documentation """
                Short description of trigger origin, e.g. name of the mapping.
                Used for diagnostic purposes.
            """;
            // <a:operational>true</a:operational>
            since "4.0";
        }
        item extension { // TODO
            type Extension;
            documentation """
                Extension container used to provide additional situation-specific information to the trigger.
            """;
        }
    }

    container Metadata {
        itemName metadata;
        documentation """
            Meta-data about data creation, modification, etc.
            It may apply to objects but also parts of the object (e.g. assignments).

            Meta-data only apply to successful operations. That is obvious for create, but it also applies
            to modify. For obvious reasons there are no metadata about delete.
            We keep no metadata about reading. That would be a huge performance hit.

            Meta-data only describe the last operation of its kind. E.g. there is a record of last
            modification, last approval, etc. There is no history. The last operation overwrites data
            about the previous operation.

            These data are informational only. They should not be used for secUrity purposes (use auditing
            subsystem for that). But presence of metadata simplifies system administration and may provide
            some basic information "at the glance" which may be later confirmed by the audit logs.

            Meta-data are also supposed to be searchable. Therefore they may be used to quickly find
            "candidate" objects for a closer examination.
        """;
        // <a:operational>true</a:operational>
        // <a:container/>
        // <a:displayName>Metadata</a:displayName>

        item requestTimestamp {
            type DateTime;
            documentation """
                The timestamp of "create" operation request. It is set once and should never be changed.

                In case of "background" processes to create object (e.g. create with approval)
                this should be the timestamp when the process started. I.e. the timestamp when
                the operation was requested.
            """;
            // <a:displayName>MetadataType.requestTimestamp</a:displayName>
            // <a:operational>true</a:operational>
            since "3.5";
            // <a:valueMetadata />
        }

        item requestor {
            type ObjectReference;
            documentation """
                Reference to the user that requested the "create" operation for this object or assignment.
            """;
            // <a:displayName>MetadataType.requestorRef</a:displayName>
            // <a:operational>true</a:operational>
            // <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
            // <a:valueMetadata />
        }

        item requestorComment {
            type String;
            documentation """
                Comment of the user that requested the "create" operation for this object or assignment.
            """;
            // <a:displayName>MetadataType.requestorComment</a:displayName>
            // <a:operational>true</a:operational>
            since "3.7";
        }

        item createTimestamp {
            type DateTime;
            documentation """
                The timestamp of data creation. It is set once and should never be changed.

                In case of "background" processes to create object (e.g. create with approval)
                this should be the timestamp when the process ended. I.e. the timestamp when
                the operation was executed.
            """;
            // <a:displayName>MetadataType.createTimestamp</a:displayName>
            // <a:operational>true</a:operational>
            // <a:indexed>true</a:indexed>
            since "3.5";
        }

        item creator {
            type ObjectReference;
            maxOccurs unbounded;
            documentation """
                Reference to the user that approved the creation of the data (if there was such a user).
                This is multi-value reference therefore multiple approvers may be recorded. However the order and
                hierarchy of the approvers is lost.
            """;
            // <a:displayName>MetadataType.createApproverRef</a:displayName>
            // <a:operational>true</a:operational>
            // <a:indexed>true</a:indexed>
            // <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
        }

        item createApproverComment {
            type String;
            maxOccurs unbounded;
            documentation """
                Comments of the approvers dUring the creation of the data. Note that these comments are in no
                particular order, so basically it is not known who entered which comment.
            """;
            // <a:displayName>MetadataType.createApprovalComment</a:displayName>
            // <a:operational>true</a:operational>
            since "3.7";
        }

        item createApprovalTimestamp {
            type DateTime;
            documentation """
                The timestamp of creation approval.
            """;
            // <a:displayName>MetadataType.createApprovalTimestamp</a:displayName>
            // <a:operational>true</a:operational>
            since "3.5";
        }

        item createChannel {
            type Uri;
            documentation """
                Channel in which the object was created.
            """;
            // <a:displayName>MetadataType.createChannel</a:displayName>
            // <a:operational>true</a:operational>
            // <a:indexed>true</a:indexed>
        }

        item createTask {
            type ObjectReference;
            documentation """
                Reference to the task that created the object (if it was a persistent one).
            """;
            // <a:displayName>MetadataType.createTaskRef</a:displayName>
            // <a:operational>true</a:operational>
            // <a:objectReferenceTargetType>tns:TaskType</a:objectReferenceTargetType>
            since "3.7";
        }

        item modifyTimestamp {
            type DateTime;
            // <a:displayName>MetadataType.modifyTimestamp</a:displayName>
            // <a:operational>true</a:operational>
            // <a:indexed>true</a:indexed>
        }

        item modifier {
            type ObjectReference;
            // <a:displayName>MetadataType.modifierRef</a:displayName>
            // <a:operational>true</a:operational>
            // <a:indexed>true</a:indexed>
            // <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
        }

        item modifyApprover {
            type ObjectReference;
            maxOccurs unbounded;
            // <a:displayName>MetadataType.modifyApproverRef</a:displayName>
            // <a:operational>true</a:operational>
            // <a:indexed>true</a:indexed>
            // <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
        }

        item modifyApprovalComment {
            type String;
            maxOccurs unbounded;
            // <a:displayName>MetadataType.modifyApprovalComment</a:displayName>
            // <a:operational>true</a:operational>
            since "3.7";
        }

        item modifyChannel {
            type Uri;
            // <a:displayName>MetadataType.modifyChannel</a:displayName>
            // <a:operational>true</a:operational>
            // <a:indexed>true</a:indexed>
        }

        item modifyTask {
            type ObjectReference;
            // <a:displayName>MetadataType.modifyTaskRef</a:displayName>
            // <a:operational>true</a:operational>
            // <a:objectReferenceTargetType>tns:TaskType</a:objectReferenceTargetType>
            since "3.7";
        }

        item lastProvisioningTimestamp {
            type DateTime;
            // <a:displayName>MetadataType.lastProvisioningTimestamp</a:displayName>
            // <a:operational>true</a:operational>
            since "3.6.1";
        }

        item certificationFinishedTimestamp {
            type DateTime;
            // <a:displayName>MetadataType.certificationFinishedTimestamp</a:displayName>
            // <a:operational>true</a:operational>
            since "3.7";
        }

        item certificationOutcome {
            type String;
            // <a:displayName>MetadataType.certificationOutcome</a:displayName>
            // <a:operational>true</a:operational>
            since "3.7";
        }

        item certifier {
            type ObjectReference;
            // <a:displayName>MetadataType.certifierRef</a:displayName>
            // <a:operational>true</a:operational>
            // <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
            since "3.7";
        }

        item certifierComment {
            type String;
            maxOccurs unbounded;
            // <a:displayName>MetadataType.certifierComment</a:displayName>
            // <a:operational>true</a:operational>
            since "3.7";
        }

        item originMappingName {
            type String;
            // <a:displayName>MetadataType.originMappingName</a:displayName>
            // <a:operational>true</a:operational>
            since "3.7";
        }
    }

    // axiom

    // types-3
    type PolyString;

    // query-3
    type SearchFilter;
    type EvaluationTime;
    type ReferentialIntegrity;

    // ???
    // type Extension;

    // common-3
    type OperationResult;
    type OperationExecution;
    type LensContext;
    type PolicyException;
    type DiagnosticInformation;
    type Credentials;
    type AdminGuiConfiguration;
    type Activation;

    // should exist because of "container XXX"
    // Already defined
    // type Trigger;
    // type Assignment;

}
